import torch
import torch.nn as nn
import torch.nn.functional as F


class Net(nn.Module):
    def __init__(self, classes_count):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding='same')
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding='same')
        self.conv3 = nn.Conv2d(32, 32, kernel_size=3, padding='same')
        self.conv4 = nn.Conv2d(32, 32, kernel_size=3, padding='same')
        self.bn1 = nn.BatchNorm2d(32)
        self.dropout1 = nn.Dropout2d(0.3)

        self.conv5 = nn.Conv2d(32, 64, kernel_size=3, padding='same')
        self.conv6 = nn.Conv2d(64, 64, kernel_size=3, padding='same')
        self.conv7 = nn.Conv2d(64, 64, kernel_size=3, padding='same')
        self.conv8 = nn.Conv2d(64, 64, kernel_size=3, padding='same')
        self.bn2 = nn.BatchNorm2d(64)
        self.dropout2 = nn.Dropout2d(0.3)

        self.conv9 = nn.Conv2d(64, 128, kernel_size=3, padding='same')
        self.conv10 = nn.Conv2d(128, 128, kernel_size=3, padding='same')
        self.conv11 = nn.Conv2d(128, 128, kernel_size=3, padding='same')
        self.conv12 = nn.Conv2d(128, 128, kernel_size=3, padding='same')
        self.bn3 = nn.BatchNorm2d(128)
        self.dropout3 = nn.Dropout2d(0.3)

        self.conv13 = nn.Conv2d(128, 256, kernel_size=3, padding='same')
        self.conv14 = nn.Conv2d(256, 256, kernel_size=3, padding='same')
        self.conv15 = nn.Conv2d(256, 256, kernel_size=3, padding='same')
        self.conv16 = nn.Conv2d(256, 256, kernel_size=3, padding='same')
        self.bn4 = nn.BatchNorm2d(256)
        self.dropout4 = nn.Dropout2d(0.3)

        self.conv17 = nn.Conv2d(256, 1024, kernel_size=3, padding='same')
        self.conv18 = nn.Conv2d(1024, 1024, kernel_size=3, padding='same')
        self.conv19 = nn.Conv2d(1024, 1024, kernel_size=3, padding='same')
        self.conv20 = nn.Conv2d(1024, 1024, kernel_size=3, padding='same')
        self.bn5 = nn.BatchNorm2d(1024)
        self.dropout5 = nn.Dropout2d(0.3)

        self.fc1 = nn.Linear(4096, 2048)
        self.fc2 = nn.Linear(2048, 32)
        self.fc3 = nn.Linear(32, classes_count)
        self.dropout6 = nn.Dropout2d(0.2)

    def forward(self, x):
        x = self.conv1(x)
        x = nn.functional.relu(x)
        x = self.bn1(x)
        x = self.conv2(x)
        x = nn.functional.relu(x)
        x = self.bn1(x)
        x = self.conv3(x)
        x = nn.functional.relu(x)
        x = self.bn1(x)
        x = self.conv4(x)
        x = nn.functional.relu(x)
        x = self.bn1(x)
        # x = nn.functional.max_pool2d(x, 2)
        x = self.dropout1(x)

        x = self.conv5(x)
        x = nn.functional.relu(x)
        x = self.bn2(x)
        x = self.conv6(x)
        x = nn.functional.relu(x)
        x = self.bn2(x)
        x = self.conv7(x)
        x = nn.functional.relu(x)
        x = self.bn2(x)
        x = self.conv8(x)
        x = nn.functional.relu(x)
        x = self.bn2(x)
        x = nn.functional.max_pool2d(x, 2)
        x = self.dropout2(x)

        x = self.conv9(x)
        x = nn.functional.relu(x)
        x = self.bn3(x)
        x = self.conv10(x)
        x = nn.functional.relu(x)
        x = self.bn3(x)
        x = self.conv11(x)
        x = nn.functional.relu(x)
        x = self.bn3(x)
        x = self.conv12(x)
        x = nn.functional.relu(x)
        x = self.bn3(x)
        x = nn.functional.max_pool2d(x, 2)
        x = self.dropout3(x)

        x = self.conv13(x)
        x = nn.functional.relu(x)
        x = self.bn4(x)
        x = self.conv14(x)
        x = nn.functional.relu(x)
        x = self.bn4(x)
        x = self.conv15(x)
        x = nn.functional.relu(x)
        x = self.bn4(x)
        x = self.conv16(x)
        x = nn.functional.relu(x)
        x = self.bn4(x)
        x = nn.functional.max_pool2d(x, 2)
        x = self.dropout4(x)

        x = self.conv17(x)
        x = nn.functional.relu(x)
        x = self.bn5(x)
        x = self.conv18(x)
        x = nn.functional.relu(x)
        x = self.bn5(x)
        x = self.conv19(x)
        x = nn.functional.relu(x)
        x = self.bn5(x)
        x = self.conv20(x)
        x = nn.functional.relu(x)
        x = self.bn5(x)
        x = nn.functional.max_pool2d(x, 2)
        x = self.dropout5(x)

        x = torch.flatten(x, start_dim=1)
        x = self.fc1(x)
        x = nn.functional.relu(x)
        x = self.dropout6(x)
        x = self.fc2(x)
        x = nn.functional.relu(x)
        x = self.fc3(x)
        output = nn.functional.log_softmax(x, dim=1)
        return output